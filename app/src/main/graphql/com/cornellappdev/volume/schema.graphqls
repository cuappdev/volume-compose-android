directive @specifiedBy(url: String!) on SCALAR
type Article {
  id: ID!
  articleURL: String!
  date: DateTime!
  imageURL: String!
  publication: Publication!
  publicationSlug: String!
  shoutouts: Float!
  title: String!
  nsfw: Boolean!
  isTrending: Boolean!
  isFiltered: Boolean!
  trendiness: Float!
}

scalar DateTime

type Mutation {
  incrementShoutouts(id: String!, uuid: String!): Article
  createUser(
    deviceType: String!
    followedPublications: [String!]!
    deviceToken: String!
  ): User!
  followPublication(slug: String!, uuid: String!): User
  unfollowPublication(slug: String!, uuid: String!): User
  readArticle(articleID: String!, uuid: String!): User
  bookmarkArticle(uuid: String!): User
  getWeeklyDebrief: [User!]!
}

type Publication {
  id: ID!
  backgroundImageURL: String!
  bio: String!
  bioShort: String!
  name: String!
  profileImageURL: String!
  rssName: String!
  rssURL: String!
  slug: String!
  shoutouts: Float!
  websiteURL: String!
  mostRecentArticle: Article
  numArticles: Float!
  socials: [Social!]!
}

type PublicationSlug {
  slug: String!
}

type Query {
  getArticleByID(id: String!): Article
  getArticlesByIDs(ids: [String!]!): [Article!]!
  getAllArticles(offset: Float = 0, limit: Float = 25): [Article!]!
  getArticlesByPublicationID(
    offset: Float = 0
    limit: Float = 25
    publicationID: String!
  ): [Article!]!
  getArticlesByPublicationIDs(
    offset: Float = 0
    limit: Float = 25
    publicationIDs: [String!]!
  ): [Article!]!
  getArticlesByPublicationSlug(
    offset: Float = 0
    limit: Float = 25
    slug: String!
  ): [Article!]!
  getArticlesByPublicationSlugs(
    offset: Float = 0
    limit: Float = 25
    slugs: [String!]!
  ): [Article!]!
  getArticlesAfterDate(limit: Float = 25, since: String!): [Article!]!
  getTrendingArticles(limit: Float = 25): [Article!]!
  getAllPublications: [Publication!]!
  getPublicationByID(id: String!): Publication
  getPublicationBySlug(slug: String!): Publication
  getPublicationsByIDs(ids: [String!]!): [Publication!]!
  getUser(uuid: String!): User
}

type Social {
  social: String!
  URL: String!
}

type User {
  id: ID!
  uuid: String!
  followedPublications: [PublicationSlug!]!
  deviceToken: String!
  deviceType: String!
  numShoutouts: Float!
  numBookmarkedArticles: Float!
  readArticles: [Article!]!
  weeklyDebrief: WeeklyDebrief
}

type WeeklyDebrief {
  id: ID!
  uuid: String!
  creationDate: DateTime!
  expirationDate: DateTime!
  numShoutouts: Float!
  numBookmarkedArticles: Float!
  numReadArticles: Float!
  readArticles: [Article!]!
  randomArticles: [Article!]!
}
